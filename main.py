# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xug6x7qZHwrJ_uYj2AmAKccAD06vLKNF

# Reclamações e satisfação de empregados de instituições financeiras

## Imports
"""

import pandas as pd
import os
import glob

"""## Reclamações

### Load dos dados do diretório para um dataframe
"""

path = os.getcwd() + '/reclamacoes'
csv_files = glob.glob(os.path.join(path, "*.csv"))
dfs = []
print(csv_files)
for f in csv_files:
  try:
    df = pd.read_csv(f, sep=';')
    dfs.append(df)
  except pd.errors.ParserError as e:
    print(f"An error occurred while parsing the CSV file: {e}")
    pass
  except pd.errors.EmptyDataError:
    print("The CSV file is empty.")
    pass
df_reclamacoes = pd.concat(dfs, ignore_index=True)
df_reclamacoes.info()

df_reclamacoes.head()

"""### Aplicação de filtros"""

df_reclamacoes = df_reclamacoes[['Ano', 'Trimestre', 'Instituição financeira', 'CNPJ IF', 'Índice', 'Quantidade total de reclamações', 'Quantidade total de clientes – CCS e SCR']]

"""### Rename das colunas"""

renamed_columns = {
    'Instituição financeira': 'nome',
    'CNPJ IF': 'cnpj',
    'Índice': 'indice',
    'Quantidade total de reclamações': 'total_reclamacoes',
    'Quantidade total de clientes – CCS e SCR': 'total_clientes'
    }
df_reclamacoes = df_reclamacoes.rename(columns=renamed_columns)
df_reclamacoes.info()

"""### Conversão do indice para float"""

df_reclamacoes.indice = df_reclamacoes.indice.str.replace('.', '').str.replace(',', '.').str.replace(' ', '0').astype(float)
df_reclamacoes.info()

"""### Conversão do total_clientes para int"""

df_reclamacoes.total_clientes.isnull()

df_reclamacoes.total_clientes = df_reclamacoes.total_clientes.astype(str)

df_reclamacoes.total_clientes = df_reclamacoes.total_clientes.replace(' ', '0').replace(',', '').replace('.', '').replace('nan', '0')
df_reclamacoes.total_clientes = df_reclamacoes.total_clientes.astype(int)
df_reclamacoes.total_clientes.isnull()

"""### Remoção de leading e trailing spaces do nome"""

df_reclamacoes.nome = df_reclamacoes.nome.str.strip()
df_reclamacoes.nome.unique()

df_reclamacoes

"""## Satisfação de empregados de instituições financeiras

### Load dos dados do diretório para um dataframe
"""

path = os.getcwd() + '/empregados'
csv_files = glob.glob(os.path.join(path, "*.csv"))
dfs = []
for f in csv_files:
  try:
    df = pd.read_csv(f, sep='|')
    dfs.append(df)
  except pd.errors.ParserError as e:
    print(f"An error occurred while parsing the CSV file: {e}")
    pass
  except pd.errors.EmptyDataError:
    print("The CSV file is empty.")
    pass

df_empregados = pd.concat(dfs, ignore_index=True)
df_empregados.shape

df_empregados.head()

"""### Aplicação de filtros"""

df_empregados = df_empregados[['Nome', 'Geral', 'Remuneração e benefícios']]

"""### Rename das colunas"""

renamed_columns = {
    'Nome': 'nome',
    'Geral': 'satisfacao_geral',
    'Remuneração e benefícios': 'satisfacao_remuneracao_beneficios',
}
df_empregados = df_empregados.rename(columns=renamed_columns)
df_empregados.info()

"""### Remoção de leading e trailing spaces"""

df_empregados.nome = df_empregados.nome.str.strip()
df_empregados.nome.unique()

"""## Enquadramento

### Load dos dados para dataframe
"""

df_bancos = pd.read_csv('bancos/EnquadramentoInicia_v2.tsv', sep='\t')
df_bancos

"""### Rename das colunas"""

columns_renamed = {
    'Segmento': 'segmento',
    'Nome': 'nome',
    'CNPJ': 'cnpj',
}
df_bancos = df_bancos.rename(columns=columns_renamed)
df_bancos

"""### Remoção de leading e trailing spaces"""

df_bancos.nome = df_bancos.nome.str.strip()
df_bancos.nome.unique()

"""## Resultados"""

dfs = [df_empregados, df_reclamacoes, df_bancos]
for df in dfs:
  print(df.head(2))
  print('=======================')

result = pd.DataFrame()
result['nome'] = df_reclamacoes.nome

bancos = df_bancos[['nome', 'segmento']]

# agregações soma e média
reclamacoes = df_reclamacoes[['nome', 'total_reclamacoes']].groupby('nome').sum('total_reclamacoes').reset_index()
indices = df_reclamacoes[['nome', 'indice']].groupby('nome').mean().reset_index().round(2)
clientes = df_reclamacoes[['nome', 'total_clientes']].groupby('nome').mean().reset_index().round(2)
satisfacao = df_empregados.groupby('nome').mean().reset_index().round(2)

# limpeza para possibilitar os merges
reclamacoes.nome = reclamacoes.nome.str.replace('\(conglomerado\)', '', case=False, regex=True).str.strip()
indices.nome = indices.nome.str.replace('\(conglomerado\)', '', case=False, regex=True).str.strip()
clientes.nome = clientes.nome.str.replace('\(conglomerado\)', '', case=False, regex=True).str.strip()
satisfacao.nome = satisfacao.nome.str.replace('\(conglomerado\)', '', case=False, regex=True).str.strip()
bancos.nome = df_bancos.nome.str.replace('- PRUDENCIAL', '', case=False, regex=True).str.strip()

# merges baseado nos bancos dos arquivos de reclamacoes
result = pd.merge(reclamacoes, indices, on='nome', how='left')
result = pd.merge(result, clientes, on='nome', how='left')
result = pd.merge(result, satisfacao, on='nome', how='outer')
result = pd.merge(result, bancos, on='nome', how='left')

# arquivo salvo
result.to_csv('resultados.csv', sep=';')